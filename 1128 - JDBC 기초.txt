라이브러리(Library)
- 함수(또는 메서드) 들의 집합
- 사용해야하는 함수(또는 메서드)들을 미리 만들어서 모아놓은 곳

API(Application Programming Interface)
- 라이브러리에 접근하기 위한 규칙들을 정의해 놓은 것
- 라이브러리에서 제공하는 함수(또는 메서드)들에 접근하기 위해
  API 에 정의된 규칙에 따라 입력을 통해 결과를 전달받고
  해당 라이브러리를 사용할 수 있도록 해 주는 것
- 라이브러리 = API(= 클래스들의 모음집)
 
JDBC(Java DataBase Connectivity) API
- 자바에서 데이터베이스에 접근하기 위한 다양한 클래스들을 묶어서
  제공하는 표준화 된 API(또는 라이브러리)
- MySQL, Oracle 등 각 데이터베이스 제조사의 개발자가
  프로그래밍 언어를 통해 자사의 데이터베이스에 쉽게 접근할 수 있도록
  해당 데이터베이스 접근에 필요한 기능들을 클래스(및 인터페이스) 형태로 제공해준다.
  따라서, 프로그램 개발자는 데이터베이스 내부 구조를 몰라도
  JDBC 를 활용하여 클래스를 다루는 것만으로 프로그래밍언어 - DB 연결 수행 가능
  => 데이터베이스 접근 방법을 표준화 된 형태로 제공해주므로
     데이터베이스(제품)가 변경되더라도 드라이버 교체 및 간단한 설정 변경을 통해
     기존 코드를 수정하지 않고도 데이터베이스 교체가 가능함
- JDBC 를 통해 데이터베이스를 접근하기 위해서 가장 기본적으로 드라이버 클래스를 통해
  데이터베이스를 연결해야한다!
  => 이 때, 드라이버 클래스가 데이터베이스 개발자로부터 미리 만들어져 제공되는 클래스 중 하나

[ MySQL 을 다루기 위한 JDBC 드라이버 준비 ]
1. MySQL 연동을 위한 드라이버가 포함된 JDBC API(라이브러리) 다운로드 하거나
   또는 MySQL 설치 시 함께 설치되는 JDBC API 를 활용
   1) https://www.mysql.com/ 접속 후 상단 Downloads 클릭
   2) 아래쪽 MySQL Community (GPL) Downloads » 링크 클릭
      (또는 https://dev.mysql.com/downloads/ 주소 접속)
   3) Connector/J 클릭
   4) Archives 메뉴 클릭
   5) 최신 버전 선택 후 Platform Independent 선택 후
      Platform Independent (Architecture Independent), ZIP Archive 다운로드 클릭
   ----------
   또는 C:\Program Files (x86)\MySQL\Connector J 8.x 폴더에 접근

2. 다운로드 된 압축 파일을 풀면 mysql-connector-8.x.xx.jar 파일 사용하거나
   또는 Connector J 8.x 폴더의 동일한 파일 사용
   1) 특정 프로젝트에서만 해당 라이브러리를 사용할 경우
      - 이클립스 내의 프로젝트명 - src - main - webapp - WEB-INF - lib 폴더에 파일 복사
      - 해당 파일 우클릭 - Build Path - Add to Build Path 선택
      - 프로젝트 내의 라이브러리 목록 중 Referenced Libraries 항목 내에
        mysql-connector-8.x.xx.jar 라이브러리 추가 확인

   2) 모든 프로젝트에서 해당 라이브러리를 사용할 경우
      - 이클립스에서 설정된 JRE 폴더 열기
        (Window 메뉴 - Preferences - Java - Installed JREs 메뉴에서 확인 및 설정)
      - 해당 JRE 폴더 - lib - ext 폴더 내에 mysql-connector-java-8.x.xx.jar 파일 복사
        (ex. C:\Program Files\Java\jrexx\lib\ext)
      - 이클립스 재시작 후 라이브러리 목록 중 JRE System Libraries 항목에 라이브러리 확인

============================================================================================

[ JDBC 를 활용한 MySQL 연동(사용) 방법 - 4단계 ]

< 1단계. JDBC 드라이버 클래스 로드 >
- java.lang 패키지의 Class 클래스의 static 메서드 forName() 호출하여
  드라이버 클래스가 위치한 패키지명과 클래스명을 문자열 파라미터로 전달
- com.mysql.cj.jdbc 패키지 내의 Driver.class 파일을 지정해야함
  => "com.mysql.cj.jdbc.Driver" 형식으로 지정(주의! .class 생략해야함)
- 해당 드라이버 클래스가 자바 메모리에 로딩됨

< 2단계. DB 연결(접속) >
- java.sql 패키지의 DriverManager 클래스의 static 메서드 getConnection() 호출하여
  파라미터로 DB 접속을 위한 URL 과 DB 접속 계정명, 패스워드를 문자열로 전달
  => URL 형식 : "jdbc:mysql://접속할주소:포트번호/DB명"
                ex) jdbc:mysql://localhost:3306/study_jsp3
  => 실제 접속 문법
     DriverManager.getConnection("jdbc:mysql://localhost:3306/study_jsp3", "root", "1234);
- 접속에 성공할 경우 java.sql.Connection 타입 객체 리턴됨
  따라서, 리턴되는 객체를 전달받아 저장하면 접속 정보를 유지하고 사용할 수 있음
  Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/study_jsp3", "root", "1234);
  
- 주의사항!
  1) 아이디 또는 패스워드 틀렸을 경우 발생하는 오류 메세지
     java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
                                                    ~~~~ 접속계정명
  2) 접속할 DB 명이 틀렸을 경우 발생하는 오류 메세지
     java.sql.SQLSyntaxErrorException: Unknown database 'study_jsp'
  3) 포트번호가 틀렸을 경우 발생하는 오류 메세지
     java.net.ConnectException: Connection refused: connect
  4) 접속 주소가 틀렸을 경우 발생하는 오류 메세지
     java.net.UnknownHostException: localhos


< 3단계 - SQL 구문 작성 및 전달 >
- 앞의 1단계, 2단계 과정을 통해 DB 에 접속된 상태에서
  접속 정보를 담고 있는 Connection 객체를 통해 데이터베이스 관련 작업 수행 가능
  (반드시 2단계 과정에서 java.sql.Connection 타입 변수에 객체를 리턴받아 저장되어 있어야 함)
- Connection 객체의 prepareStatement() 메서드를 호출하여 실행할 SQL 구문을 문자열로 전달 후
  리턴되는 java.sql.PreparedStatement 객체를 변수에 저장
- 기본 문법
  PreparedStatement pstmt = con.prepareStatement("SQL구문");
- 추가사항)
  PreparedStatement 객체를 통해 SQL 구문 전달 시 데이터 부분을 만능문자 ? 기호로 미리 표시해두고
  SQL 구문 전달하는 메서드 prepareStatement() 호출 한 후
  PreparedStatement 객체의 setXXX() 메서드를 호출하여 만능문자(?) 부분 데이터 교체
  => 이 때, setXXX() 메서드의 XXX 부분은 실제 전달되어야 하는 데이터의
     자바 데이터타입 이름을 사용하며, 파라미터로 만능문자(?) 순서번호와 실제 데이터 전달
     ex) 문자열 데이터를 교체하는 메서드 이름 : setString()
         정수 데이터를 교체하는 메서드 이름 : setInt()
         실수 데이터를 교체하는 메서드 이름 : setDouble()

< 4단계 - SQL 구문 실행 및 결과 처리 >
- 3단계 과정에서 리턴받은 PreparedStatement 객체의 executeXXX() 메서드를 호출하여
  전달받은 SQL 구문 실행
- 이 과정에서 SQL 구문에 오류가 있을 경우 오류가 발견됨(오류 발생)
  ex) java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; 
      check the manual that corresponds to your MySQL server version for the 
      right syntax to use near 'INSE INTO jsp09_student VALUES (1, '홍길동')' at line 1
                                ~~~~~~~~ 이 부분의 구문이 틀렸다는 의미 ~~~~~~~~~
  => 구문 오류 발생 시 2단계 과정과 동일한 SQLException 오류가 발생하므로 동일한 catch 블럭 실행됨
- SQL 구문의 종류에 따라 서로 다른 메서드 호출
  1) int executeUpdate()
     - DB 에 조작을 가하는 쿼리문을 실행하는 용도의 메서드
     - 주로, DML 중 INSERT, UPDATE, DELETE 구문과 DDL 중 CREATE, ALTER, DROP 등을 실행
     - 작업 실행 후 결과값이 int 타입으로 리턴되는데
       이는 영향을 받은 레코드 수가 리턴됨(DML 한정, 나머지 DDL 등은 0 리턴)

  2) ResultSet executeQuery()
     - DB 에 조작을 가하지 않는 쿼리문을 실행하는 용도의 메서드
     - SELECT 구문 실행용
     - 구문 실행 시 조회된 테이블을 객체로 관리하는 ResultSet 타입 객체가 리턴됨
     - 조회 성공 후 처리 예시
     - 다음 형태의 테이블이 ResultSet 타입 객체로 리턴됨
	+------+--------+
     	| idx  | name   | <- 현재 커서(Cursor) 위치(항상 첫번째 레코드 위에 위치)
     	+------+--------+
    	|    1 | 홍길동 | <- rs.next() 한 번 호출 시 커서 위치(레코드 있음 = true 리턴)
     	|    2 | 이순신 | <- rs.next() 두 번 호출 시 커서 위치(레코드 있음 = true 리턴)
     	+------+--------+ <- rs.next() 세 번 호출 시 커서 위치(레코드 없음 = false 리턴) 
     - 조회 결과 테이블의 특정 레코드를 가리키는 포인터 역할을 커서(Cursor)라고 함
       (커서가 위치한 레코드의 데이터(컬럼)에 접근이 가능함)
       => 커서를 아래쪽으로 한 줄씩 이동하면서 각 레코드에 접근해야함
          ResultSet 객체의 next() 메서드를 호출하여 커서를 다음 레코드로 이동(리턴타입 : boolean)
          (커서 이동 시 다음 레코드가 존재하면 true, 존재하지 않으면 false 리턴됨)
          즉, 커서는 다음 레코드가 존재할 동안(= true)만 이동하도록 반복 작업 수행하면 됨
          (다만, 무조건 조회 결과 레코드가 1개일 경우에는 if문으로 대체 가능함)
     - 다음 레코드가 존재할 경우 ResultSet 객체의 getXXX() 메서드를 호출하여 각 컬럼 데이터 가져오기
       => 이 때, getXXX() 메서드의 XXX 은 가져올 컬럼의 자바 데이터타입명을 지정
          (ex. 문자데이터(VARCHAR) 가 저장된 컬럼 : getString(), 정수 데이터 컬럼 : getInt())
       => getXXX() 메서드 파라미터는 컬럼의 인덱스번호(정수 1부터 시작) 또는 컬럼명(String)을 지정
          (ex. 문자데이터 저장된 두번째 컬럼(컬럼명 : name) : getString(2) 또는 getString("name")

=================================================================================