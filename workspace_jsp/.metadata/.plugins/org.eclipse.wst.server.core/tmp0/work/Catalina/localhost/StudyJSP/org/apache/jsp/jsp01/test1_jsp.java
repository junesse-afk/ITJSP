/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-11-20 06:12:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp01;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class test1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

 // 선언문 시작
// 이곳은 JSP 선언문(Declaration)으로 JSP 파일 전체(= 전역)에서 접근 가능한
// 멤버변수 및 메서드를 선언하는 곳입니다.
// => 자바 클래스 내의 멤버레벨(클래스 내부, 메서드 외부) 위치와 동일하게 취급됨
// => 실제로 JSP 파일이 컴파일되면 class 파일이 만들어지는데 이 클래스 내에 멤버레벨에 코드들이 위치함
// ----------------------------------------------------------------------------
// 1. 멤버변수(필드) 선언
String str1 = "멤버변수입니다."; // 접근제한자 생략 시 default 접근제한자

// 2. 메서드 정의 => 접근제한자 리턴타입 메서드명([파라미터...]) {}
// 2-1) 리턴값이 없는 method1() 메서드 정의
public void method1() {
	System.out.println("선언문 내의 method1() 메서드 호출됨!");
}

// 2-2) String 타입의 리턴값이 있는 method2() 메서드 정의
public String method2() {
	return "method2() 메서드의 리턴값";
}

 private String str2 = "두번째 멤버변수"; 
String str4 = "멤버변수 str4"; 
  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("    \r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<h1>test1.jsp</h1>\r\n");
      out.write("	<!-- 주석1 --> <!-- HTML 주석 (사용자에게 보임) -->\r\n");
      out.write("	");
      out.write(' ');
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<h3>멤버변수 str1 = ");
      out.print(str1 );
      out.write("</h3>\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("	<h3>리턴값이 있는 method2() 리턴값: ");
      out.print(method2() );
      out.write("</h3>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	 \r\n");
      out.write("	");
      out.write(" \r\n");
      out.write("	");
      out.write("</h3>");
      out.write("	 \r\n");
      out.write("	 ");

	 // 이 곳은 스크립틀릿 내부입니다.
	 // 변수 선언도 가능하며, 선언된 변수는 로컬변수로 취급됨
	 String str3 = "로컬변수입니다.";
	 
	 // 다른 메서드를 호출하거나, 객체 생성 등의 다양한 작업 가능함
	 method1(); // 출력문이 아니므로 리턴타입이 void인 메서드 호출도 가능
// 	 System.out.println(method1()); // 출력문 내에서는 리턴타입 void인 메서드 호출불가!
	 
	 for (int i = 0; i < 3; i++) {
		 System.out.println("str3 = " + str3);
	 }

	 // 스크립틀릿 내에서 메서드 정의는 불가능하다!
// 	 public void method3(){} // 컴파일 에러 발생!

	 System.out.println("이 문장은 이클립스 콘솔창에 출력됨!");
	 System.out.println("str3 = " + str3);
	 
	 // 스크립틀릿 내에서 웹브라우저에 데이터 출력하려면
	 // JSP 에서 제공하는 내장객체 out 객체의 print() 또는 println() 메서드 사용
	 // => JSP의 표현식과 동일한 역할 수행
// 	 out.println("이 문장은 웹브라우저에 출력됨!");
// 	 out.println("str3 = " + str3);
	 // 주의! println() 메서드를 호출하더라도 줄바꿈 기능이 동작하지 않는다!
	 // => HTML 문서에서 줄바꿈은 <br> 또는 <p> 태그로 수행하여, 엔터키는 공백 1개로 취급되기 때문
	 // => 따라서, <br> 태그를 문자열에 포함시켜서 줄바꿈을 직접 표현!
	 out.println("이 문장은 웹브라우저에 출력됨!<br>");
	 out.println("str3 = " + str3);
	 
      out.write("\r\n");
      out.write("	 \r\n");
      out.write("	 ");
      out.write("\r\n");
      out.write("	 <h3>로컬변수 str3 = ");
      out.print(str3 );
      out.write("</h3>\r\n");
      out.write("	 \r\n");
      out.write("	 <h3>멤버변수 str4 = ");
      out.print(str4 );
      out.write("</h3>\r\n");
      out.write("	 \r\n");
      out.write("	 ");
      out.write("\r\n");
      out.write("	 \r\n");
      out.write("	 <h3>멤버변수 str4 = ");
      out.print(str4 );
      out.write("</h3>\r\n");
      out.write("	 \r\n");
      out.write("	 \r\n");
      out.write("	 \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
